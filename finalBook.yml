- hosts: ansibleTestServer
  become: yes
  gather_facts: false
  vars:
    - user: pirathees
    - pwd : pirathees
    - JavaRpmUrl : http://download.oracle.com/otn-pub/java/jdk/8u131-b11/d54c1d3a095b4ff2b6607d096fa80163/jdk-8u131-linux-x64.rpm
    - JDK : jdk-8u131-linux-x64.rpm
    - verMQRpmUrl: https://github.com/vernemq/vernemq/releases/download/1.12.4/vernemq-1.12.4.centos7.x86_64.rpm
    - verneMQRpm : vernemq-1.12.4.centos7.x86_64.rpm

    - certbot_mail_address: Need Working mail address to obtain SSL Certificates
    - domain: Needs Domain to Obtain SSL (Bare Ip not enough-to obtain SSL C)

    - serviceLocal: /home/pirathees/Documents/service/polar.service
    - nginxConfLocal:  /home/pirathees/Documents/nginx/nginx.conf
    - testJARLocal : /home/pirathees/Downloads/Fat Jr/polar-service-1.1.0.0.jar
    - serviceName:  polar.service

    - frontEndApplication: /home/pirathees/Downloads/tars/polarAngular.tar.gz
    - frontEndApplicationName: polarAngular
  tasks:
    #### Create user with root access ######
    - name: Create a New user and copy public key to remote host [It's Takes public key of the local host that runs playbook]
      block:
        - name: Create a user with root permisions
          user:
            name: "{{ user }}"
            password: "{{ pwd | password_hash('sha512') }}"
            groups:
              - wheel
            state: present

        - name: Add public key to authorized_keys
          authorized_key:
            user: "{{ user }}"
            state: present
            key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"

        - name: Alter /home/user folder permison to 755 or rwxr-xr-x
          file:
            path: "/home/{{user}}"
            state: directory
            owner: "{{user}}"
            mode: '0755'
    ########  Create Download folder to hold Rpm files and JARs######################
    - name: Create Download Folder inside user home directory with 755
      file:
        path: "/home/{{user}}/downloads"
        state: directory
        owner: "{{user}}"
        mode: '0755'
    ########  Download and Install Java ######################
    - name : Download Java 8 RPM and install it
      block :
        - name: Download Java 8 RPM if not exists in user downloads
          get_url:
            url: "{{JavaRpmUrl}}"
            dest: "/home/{{user}}/downloads"
            headers: 'Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie; --no-check-certificate'

        - name: Install Java 8 rpm from a user downloads
          yum:
            name: "/home/{{user}}/downloads/{{JDK}}"
            state: present
    ########  Install Mongo DB ######################
    - name : Download ,Configure and Install Mongo DB
      block:
        - name: Adding the mongodb Repository
          file:
            path: /etc/yum.repos.d/mongodb-org.repo
            state: touch

        - name: Add the repository information for the latest stable release
          blockinfile:
            path: /etc/yum.repos.d/mongodb-org.repo
            block: |
              [mongodb-org-5.0]
              name=MongoDB Repository
              baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/5.0/x86_64/
              gpgcheck=1
              enabled=1
              gpgkey=https://www.mongodb.org/static/pgp/server-5.0.asc

        - name: Installing MongoDB
          yum:
            name: mongodb-org
            state: present

        - name: Start the MongoDB service with the systemctl utility ,Ensure Mongo is Started
          systemd:
            name: mongod
            state: started
            enabled: yes
    #########  Install VerneMQ and modify config #####################
    - name : Install and Configure VerneMQ
      block:
        - name: Download VernMQ
          get_url:
            url: "{{verMQRpmUrl}}"
            dest: "/home/{{user}}/downloads"

        - name: Install VernMQ rpm from a local file
          yum:
            name: "/home/{{user}}/downloads/{{verneMQRpm}}"
            state: present

        - name: make sure VerneMQ is started
          service: name=firewalld state=started enabled=yes

        - name: edit verneMQ config
          lineinfile:
            path: /etc/vernemq/vernemq.conf
            regexp: '^accept_eula = no'
            line: accept_eula = yes

        - name :  vmq_diversity plugin needs  enabled to handle DB drivers
          lineinfile:
            path: /etc/vernemq/vernemq.conf
            regexp: '^plugins.vmq_diversity = off'
            line:  plugins.vmq_diversity = on

        - name: Disable vmq_passwd in Config
          lineinfile:
            path: /etc/vernemq/vernemq.conf
            regexp: '^plugins.vmq_passwd = on'
            line: plugins.vmq_passwd = off

        - name: Disable vmq_acl in Config
          lineinfile:
            path: /etc/vernemq/vernemq.conf
            regexp: '^plugins.vmq_acl = on'
            line: plugins.vmq_acl = off

        - name: Enable Auth Mongo DB
          lineinfile:
            path: /etc/vernemq/vernemq.conf
            regexp: '^vmq_diversity.auth_mongodb.enabled = off'
            line: vmq_diversity.auth_mongodb.enabled = on

        - name: Enable Mongo db local host enable
          lineinfile:
            path: /etc/vernemq/vernemq.conf
            regexp: '^## vmq_diversity.mongodb.host = localhost'
            line: vmq_diversity.mongodb.host = localhost

        - name: Enable MongoDB Port
          lineinfile:
            path: /etc/vernemq/vernemq.conf
            regexp: '## vmq_diversity.mongodb.port = 27017'
            line: vmq_diversity.mongodb.port = 27017
    ######### Install and Configure firewalld #####################
    - name : Install Firewall and configure zone and ports
      block:
        - name: Install firewall if it does not installed
          yum:
            name: firewalld
            state: present

        - name: make sure firewalld is started
          service: name=firewalld state=started enabled=yes

        - name: permit traffic in default-zone(Public) for https service
          firewalld:
            service: https
            permanent: yes
            state: enabled

        - name: permit traffic in default-zone(Public) for http service
          firewalld:
            service: http
            permanent: yes
            state: enabled

        - name: FirewallD port rules
          firewalld:
            permanent: yes
            immediate: yes
            port: "{{item.port}}/{{item.proto}}"
            state: "{{item.state}}"
            zone: "{{item.zone}}"
          with_items:
            - { port: "5000", proto: "tcp", state: "enabled", zone: "public" }
            - { port: "80", proto: "tcp", state: "enabled", zone: "public" }
            - { port: "9030", proto: "tcp", state: "enabled", zone: "public" }
            - { port: "8000", proto: "tcp", state: "disabled", zone: "public" }

        - name: reload service firewall
          systemd:
            name: firewalld
            state: reloaded
    ######### install nginx and Obtain SSL #####################
    - name : Install Nginx, Copy configuration from local machine and Obtain SSL
      block:
        - name:  Adding the EPEL Software Repository
          yum:
            name: epel-release
            state: present
          when : false

        - name: Installing Nginx if does not Installed
          yum:
            name: nginx
            state: present
          when : false

        - name: make sure nginx is started
          service: name=nginx state=started enabled=yes

        - name: Installing the Certbot Letâ€™s Encrypt Client
          yum:
            name: certbot-nginx
            state: present

        - name: Edit Nginx Config to Support Java Application
          ## copy local file that contains Configuration
          ## that local file need to contain Port of Java Application :9030
          copy:
            src: "{{nginxConfLocal}}"
            dest: /etc/nginx

          # To Obtain SSL
        - name: Create and Install Cert Using Nginx Plugin
          command: "certbot --nginx -d  {{domain}} -d {{domain}} -m {{certbot_mail_address}} --agree-tos --noninteractive --redirect"
          when : false
    ######### Copy Jar to remote host and  Create .Service to manage JAR #####################
    - name : Copy Local Jar to Remote host and Manage that as system service
      block:
        - name:  Copy Jarfile  to /home/user/downloads
          copy:
            src: "{{testJARLocal}}"
            dest: "/home/{{user}}/downloads"

        - name: Copy Local .service file to Remote's /etc/systemd/system
          copy:
            src: "{{serviceLocal}}"
            dest: "/etc/systemd/system"

        - name: reload systemd so that it knows of the new application added
          systemd:
            daemon_reload: yes

        - name: if already run ,then stop to run the new JAR]
          ansible.builtin.systemd:
            name: "{{serviceName}}"
            state: stopped

        - name: Starts Newly added service [.service] | Ensure .service is Running
          ansible.builtin.systemd:
            state: started
            name: "{{serviceName}}"

    ########  Copy Front-End application's tar.gz to Remote && un-zip ######################
    - name : Copy front-end Application to Remote and un-zip
      block:
        - name: copy front-end tar.gz  to remote
          copy:
            src: "{{frontEndApplication}}"
            dest: "/home/{{user}}/downloads"

        - name: un-zip front End allication's tar.gz
          command: "tar -xvzf /home/{{user}}/downloads/{{frontEndApplicationName}}.tar.gz -C /home/{{user}}/downloads"
          
    ## Restart Nginx after all Propcess is done####
    - name: Restart service nginx, in all cases
      ansible.builtin.service:
        name: nginx
        state: restarted
